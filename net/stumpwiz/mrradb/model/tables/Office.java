/*
 * This file is generated by jOOQ.
 */
package net.stumpwiz.mrradb.model.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.stumpwiz.mrradb.model.Keys;
import net.stumpwiz.mrradb.model.Raj;
import net.stumpwiz.mrradb.model.tables.Body.BodyPath;
import net.stumpwiz.mrradb.model.tables.Person.PersonPath;
import net.stumpwiz.mrradb.model.tables.Term.TermPath;
import net.stumpwiz.mrradb.model.tables.records.OfficeRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Office extends TableImpl<OfficeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>raj.office</code>
     */
    public static final Office OFFICE = new Office();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OfficeRecord> getRecordType() {
        return OfficeRecord.class;
    }

    /**
     * The column <code>raj.office.officeid</code>.
     */
    public final TableField<OfficeRecord, Long> OFFICEID = createField(DSL.name("officeid"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>raj.office.title</code>.
     */
    public final TableField<OfficeRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(45), this, "");

    /**
     * The column <code>raj.office.officeprecedence</code>.
     */
    public final TableField<OfficeRecord, Double> OFFICEPRECEDENCE = createField(DSL.name("officeprecedence"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>raj.office.officebodyid</code>.
     */
    public final TableField<OfficeRecord, Long> OFFICEBODYID = createField(DSL.name("officebodyid"), SQLDataType.BIGINT, this, "");

    private Office(Name alias, Table<OfficeRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Office(Name alias, Table<OfficeRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>raj.office</code> table reference
     */
    public Office(String alias) {
        this(DSL.name(alias), OFFICE);
    }

    /**
     * Create an aliased <code>raj.office</code> table reference
     */
    public Office(Name alias) {
        this(alias, OFFICE);
    }

    /**
     * Create a <code>raj.office</code> table reference
     */
    public Office() {
        this(DSL.name("office"), null);
    }

    public <O extends Record> Office(Table<O> path, ForeignKey<O, OfficeRecord> childPath, InverseForeignKey<O, OfficeRecord> parentPath) {
        super(path, childPath, parentPath, OFFICE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class OfficePath extends Office implements Path<OfficeRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> OfficePath(Table<O> path, ForeignKey<O, OfficeRecord> childPath, InverseForeignKey<O, OfficeRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private OfficePath(Name alias, Table<OfficeRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public OfficePath as(String alias) {
            return new OfficePath(DSL.name(alias), this);
        }

        @Override
        public OfficePath as(Name alias) {
            return new OfficePath(alias, this);
        }

        @Override
        public OfficePath as(Table<?> alias) {
            return new OfficePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Raj.RAJ;
    }

    @Override
    public Identity<OfficeRecord, Long> getIdentity() {
        return (Identity<OfficeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OfficeRecord> getPrimaryKey() {
        return Keys.KEY_OFFICE_PRIMARY;
    }

    @Override
    public List<ForeignKey<OfficeRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OFFICE_BODY_FK);
    }

    private transient BodyPath _body;

    /**
     * Get the implicit join path to the <code>raj.body</code> table.
     */
    public BodyPath body() {
        if (_body == null)
            _body = new BodyPath(this, Keys.OFFICE_BODY_FK, null);

        return _body;
    }

    private transient TermPath _term;

    /**
     * Get the implicit to-many join path to the <code>raj.term</code> table
     */
    public TermPath term() {
        if (_term == null)
            _term = new TermPath(this, null, Keys.TERM_OFFICE_FK2.getInverseKey());

        return _term;
    }

    /**
     * Get the implicit many-to-many join path to the <code>raj.person</code>
     * table
     */
    public PersonPath person() {
        return term().person();
    }

    @Override
    public Office as(String alias) {
        return new Office(DSL.name(alias), this);
    }

    @Override
    public Office as(Name alias) {
        return new Office(alias, this);
    }

    @Override
    public Office as(Table<?> alias) {
        return new Office(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Office rename(String name) {
        return new Office(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Office rename(Name name) {
        return new Office(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Office rename(Table<?> name) {
        return new Office(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Condition condition) {
        return new Office(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Office where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Office whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

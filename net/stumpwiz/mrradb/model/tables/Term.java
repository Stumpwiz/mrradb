/*
 * This file is generated by jOOQ.
 */
package net.stumpwiz.mrradb.model.tables;


import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import net.stumpwiz.mrradb.model.Keys;
import net.stumpwiz.mrradb.model.Raj;
import net.stumpwiz.mrradb.model.tables.Office.OfficePath;
import net.stumpwiz.mrradb.model.tables.Person.PersonPath;
import net.stumpwiz.mrradb.model.tables.records.TermRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Term extends TableImpl<TermRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>raj.term</code>
     */
    public static final Term TERM = new Term();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TermRecord> getRecordType() {
        return TermRecord.class;
    }

    /**
     * The column <code>raj.term.start</code>.
     */
    public final TableField<TermRecord, LocalDate> START = createField(DSL.name("start"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>raj.term.end</code>.
     */
    public final TableField<TermRecord, LocalDate> END = createField(DSL.name("end"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>raj.term.ordinal</code>.
     */
    public final TableField<TermRecord, String> ORDINAL = createField(DSL.name("ordinal"), SQLDataType.CHAR(7), this, "");

    /**
     * The column <code>raj.term.termpersonid</code>.
     */
    public final TableField<TermRecord, Long> TERMPERSONID = createField(DSL.name("termpersonid"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>raj.term.termofficeid</code>.
     */
    public final TableField<TermRecord, Long> TERMOFFICEID = createField(DSL.name("termofficeid"), SQLDataType.BIGINT.nullable(false), this, "");

    private Term(Name alias, Table<TermRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Term(Name alias, Table<TermRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>raj.term</code> table reference
     */
    public Term(String alias) {
        this(DSL.name(alias), TERM);
    }

    /**
     * Create an aliased <code>raj.term</code> table reference
     */
    public Term(Name alias) {
        this(alias, TERM);
    }

    /**
     * Create a <code>raj.term</code> table reference
     */
    public Term() {
        this(DSL.name("term"), null);
    }

    public <O extends Record> Term(Table<O> path, ForeignKey<O, TermRecord> childPath, InverseForeignKey<O, TermRecord> parentPath) {
        super(path, childPath, parentPath, TERM);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TermPath extends Term implements Path<TermRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TermPath(Table<O> path, ForeignKey<O, TermRecord> childPath, InverseForeignKey<O, TermRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TermPath(Name alias, Table<TermRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TermPath as(String alias) {
            return new TermPath(DSL.name(alias), this);
        }

        @Override
        public TermPath as(Name alias) {
            return new TermPath(alias, this);
        }

        @Override
        public TermPath as(Table<?> alias) {
            return new TermPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Raj.RAJ;
    }

    @Override
    public UniqueKey<TermRecord> getPrimaryKey() {
        return Keys.KEY_TERM_PRIMARY;
    }

    @Override
    public List<ForeignKey<TermRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TERM_PERSON_FK1, Keys.TERM_OFFICE_FK2);
    }

    private transient PersonPath _person;

    /**
     * Get the implicit join path to the <code>raj.person</code> table.
     */
    public PersonPath person() {
        if (_person == null)
            _person = new PersonPath(this, Keys.TERM_PERSON_FK1, null);

        return _person;
    }

    private transient OfficePath _office;

    /**
     * Get the implicit join path to the <code>raj.office</code> table.
     */
    public OfficePath office() {
        if (_office == null)
            _office = new OfficePath(this, Keys.TERM_OFFICE_FK2, null);

        return _office;
    }

    @Override
    public Term as(String alias) {
        return new Term(DSL.name(alias), this);
    }

    @Override
    public Term as(Name alias) {
        return new Term(alias, this);
    }

    @Override
    public Term as(Table<?> alias) {
        return new Term(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(String name) {
        return new Term(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(Name name) {
        return new Term(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(Table<?> name) {
        return new Term(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Term where(Condition condition) {
        return new Term(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Term where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Term where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Term where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Term where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Term where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Term where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Term where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Term whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Term whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

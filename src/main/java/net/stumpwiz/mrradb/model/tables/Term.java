/*
 * This file is generated by jOOQ.
 */
package net.stumpwiz.mrradb.model.tables;


import net.stumpwiz.mrradb.model.Keys;
import net.stumpwiz.mrradb.model.Raj;
import net.stumpwiz.mrradb.model.tables.records.TermRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Term extends TableImpl<TermRecord>
{

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>raj.term</code>
     */
    public static final Term TERM = new Term();

    /**
     * The column <code>raj.term.start</code>.
     */
    public final TableField<TermRecord, LocalDate> START = createField(DSL.name("start"), SQLDataType.LOCALDATE, this, "");
    /**
     * The column <code>raj.term.ordinal</code>.
     */
    public final TableField<TermRecord, String> ORDINAL = createField(DSL.name("ordinal"), SQLDataType.CHAR(7), this, "");

    /**
     * The column <code>raj.term.end</code>.
     */
    public final TableField<TermRecord, LocalDate> END = createField(DSL.name("end"), SQLDataType.LOCALDATE, this, "");
    /**
     * The column <code>raj.term.termpersonid</code>.
     */
    public final TableField<TermRecord, Long> TERMPERSONID = createField(DSL.name("termpersonid"), SQLDataType.BIGINT.nullable(false), this, "");
    /**
     * The column <code>raj.term.termofficeid</code>.
     */
    public final TableField<TermRecord, Long> TERMOFFICEID = createField(DSL.name("termofficeid"), SQLDataType.BIGINT.nullable(false), this, "");
    private transient Person _person;
    private transient Office _office;

    private Term(Name alias, Table<TermRecord> aliased)
    {
        this(alias, aliased, null);
    }

    private Term(Name alias, Table<TermRecord> aliased, Field<?>[] parameters)
    {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>raj.term</code> table reference
     */
    public Term(String alias)
    {
        this(DSL.name(alias), TERM);
    }

    /**
     * Create an aliased <code>raj.term</code> table reference
     */
    public Term(Name alias)
    {
        this(alias, TERM);
    }

    /**
     * Create a <code>raj.term</code> table reference
     */
    public Term()
    {
        this(DSL.name("term"), null);
    }

    public <O extends Record> Term(Table<O> child, ForeignKey<O, TermRecord> key)
    {
        super(child, key, TERM);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TermRecord> getRecordType()
    {
        return TermRecord.class;
    }

    @Override
    public Schema getSchema()
    {
        return aliased() ? null : Raj.RAJ;
    }

    @Override
    public UniqueKey<TermRecord> getPrimaryKey()
    {
        return Keys.KEY_TERM_PRIMARY;
    }

    @Override
    public List<ForeignKey<TermRecord, ?>> getReferences()
    {
        return Arrays.asList(Keys.TERM_PERSON_FK1, Keys.TERM_OFFICE_FK2);
    }

    /**
     * Get the implicit join path to the <code>raj.person</code> table.
     */
    public Person person()
    {
        if (_person == null)
            _person = new Person(this, Keys.TERM_PERSON_FK1);

        return _person;
    }

    /**
     * Get the implicit join path to the <code>raj.office</code> table.
     */
    public Office office()
    {
        if (_office == null)
            _office = new Office(this, Keys.TERM_OFFICE_FK2);

        return _office;
    }

    @Override
    public Term as(String alias)
    {
        return new Term(DSL.name(alias), this);
    }

    @Override
    public Term as(Name alias)
    {
        return new Term(alias, this);
    }

    @Override
    public Term as(Table<?> alias)
    {
        return new Term(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(String name)
    {
        return new Term(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(Name name)
    {
        return new Term(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Term rename(Table<?> name)
    {
        return new Term(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<LocalDate, LocalDate, String, Long, Long> fieldsRow()
    {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super LocalDate, ? super LocalDate, ? super String, ? super Long, ? super Long, ? extends U> from)
    {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super LocalDate, ? super LocalDate, ? super String, ? super Long, ? super Long, ? extends U> from)
    {
        return convertFrom(toType, Records.mapping(from));
    }
}

/*
 * This file is generated by jOOQ.
 */
package net.stumpwiz.mrradb.model.tables;


import net.stumpwiz.mrradb.model.Keys;
import net.stumpwiz.mrradb.model.Raj;
import net.stumpwiz.mrradb.model.tables.records.BodyRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * An organizational unit at Mercy Ridge.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Body extends TableImpl<BodyRecord>
{

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>raj.body</code>
     */
    public static final Body BODY = new Body();

    /**
     * The column <code>raj.body.bodyid</code>.
     */
    public final TableField<BodyRecord, Long> BODYID = createField(DSL.name("bodyid"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");
    /**
     * The column <code>raj.body.bodyimage</code>. Name of the graphic file that
     * represents the body in reports and web pages.
     */
    public final TableField<BodyRecord, String> BODYIMAGE = createField(DSL.name("bodyimage"), SQLDataType.VARCHAR(45), this, "Name of the graphic file that represents the body in reports and web pages.");
    /**
     * The column <code>raj.body.name</code>.
     */
    public final TableField<BodyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(45).nullable(false), this, "");
    /**
     * The column <code>raj.body.mission</code>.
     */
    public final TableField<BodyRecord, String> MISSION = createField(DSL.name("mission"), SQLDataType.VARCHAR(512), this, "");
    /**
     * The column <code>raj.body.bodyprecedence</code>. Field for ordering in
     * reports and web pages.  Stored as double to allow insertions of new
     * bodies.
     */
    public final TableField<BodyRecord, Double> BODYPRECEDENCE = createField(DSL.name("bodyprecedence"), SQLDataType.DOUBLE.nullable(false), this, "Field for ordering in reports and web pages.  Stored as double to allow insertions of new bodies.");

    private Body(Name alias, Table<BodyRecord> aliased)
    {
        this(alias, aliased, null);
    }

    private Body(Name alias, Table<BodyRecord> aliased, Field<?>[] parameters)
    {
        super(alias, null, aliased, parameters, DSL.comment("An organizational unit at Mercy Ridge."), TableOptions.table());
    }

    /**
     * Create an aliased <code>raj.body</code> table reference
     */
    public Body(String alias)
    {
        this(DSL.name(alias), BODY);
    }

    /**
     * Create an aliased <code>raj.body</code> table reference
     */
    public Body(Name alias)
    {
        this(alias, BODY);
    }

    /**
     * Create a <code>raj.body</code> table reference
     */
    public Body()
    {
        this(DSL.name("body"), null);
    }

    public <O extends Record> Body(Table<O> child, ForeignKey<O, BodyRecord> key)
    {
        super(child, key, BODY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BodyRecord> getRecordType()
    {
        return BodyRecord.class;
    }

    @Override
    public Schema getSchema()
    {
        return aliased() ? null : Raj.RAJ;
    }

    @Override
    public Identity<BodyRecord, Long> getIdentity()
    {
        return (Identity<BodyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BodyRecord> getPrimaryKey()
    {
        return Keys.KEY_BODY_PRIMARY;
    }

    @Override
    public Body as(String alias)
    {
        return new Body(DSL.name(alias), this);
    }

    @Override
    public Body as(Name alias)
    {
        return new Body(alias, this);
    }

    @Override
    public Body as(Table<?> alias)
    {
        return new Body(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Body rename(String name)
    {
        return new Body(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Body rename(Name name)
    {
        return new Body(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Body rename(Table<?> name)
    {
        return new Body(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, String, Double> fieldsRow()
    {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super String, ? super Double, ? extends U> from)
    {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super String, ? super Double, ? extends U> from)
    {
        return convertFrom(toType, Records.mapping(from));
    }
}
